// DCC

class Solution {
    public boolean reorderedPowerOf2(int n) {
        String target = sortDigits(n);
        Set<String> powerOfTwoPatterns = new HashSet<>();
        
        // Precompute sorted digit patterns for powers of 2
        for (int i = 0; i < 31; i++) { // 2^30 > 1e9
            int pow = 1 << i;
            powerOfTwoPatterns.add(sortDigits(pow));
        }
        
        return powerOfTwoPatterns.contains(target);
    }
    
    private String sortDigits(int num) {
        char[] arr = String.valueOf(num).toCharArray();
        Arrays.sort(arr);
        return new String(arr);
    }
}
